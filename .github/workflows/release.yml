name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v 开头的标签时触发

permissions:
  contents: write  # 允许创建和修改 releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [3.8]
        include:
          - os: macos-latest
            architecture: 'arm64'
            python-version: '3.8.10'
          - os: windows-latest
            architecture: 'x64'
            python-version: '3.8'
          - os: ubuntu-latest
            architecture: 'x64'
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
        
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip --no-cache-dir
        python -m pip install --upgrade setuptools wheel --no-cache-dir
        python -m pip install -r requirements.txt --no-cache-dir
        python -m pip install pyinstaller --no-cache-dir
        python -m pip install pywin32 --no-cache-dir
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir pyinstaller
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip python3-setuptools
        sudo apt-get install -y libgl1
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir pyinstaller
        
    - name: Build Windows Executable
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        pyinstaller --clean --onefile --windowed --name "VSA_VisionSolutionAssistant" main.py
        cd dist
        7z a -tzip ../VSA_VisionSolutionAssistant-Windows.zip *
        
    - name: Build macOS App
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        pyinstaller --clean --onefile --windowed --name "VSA_VisionSolutionAssistant" main.py
        cd dist
        zip -r ../VSA_VisionSolutionAssistant-macOS.zip *
        cd ..
        ls -la
        if [ -f "VSA_VisionSolutionAssistant-macOS.zip" ]; then
          echo "macOS zip file created successfully"
          ls -l VSA_VisionSolutionAssistant-macOS.zip
        else
          echo "Error: macOS zip file not created"
          exit 1
        fi

    - name: Build Ubuntu App
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        pyinstaller --clean --onefile --windowed --name "VSA_VisionSolutionAssistant" main.py
        cd dist
        zip -r ../VSA_VisionSolutionAssistant-Ubuntu.zip *
        cd ..
        ls -la
        if [ -f "VSA_VisionSolutionAssistant-Ubuntu.zip" ]; then
          echo "Ubuntu zip file created successfully"
          ls -l VSA_VisionSolutionAssistant-Ubuntu.zip
        else
          echo "Error: Ubuntu zip file not created"
          exit 1
        fi

    - name: List files (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Get-ChildItem -Force
        if (Test-Path dist) {
          Get-ChildItem -Path dist -Force
        }

    - name: List files (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        ls -la
        if [ -d "dist" ]; then
          ls -la dist/
        fi

    - name: List files (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        ls -la
        if [ -d "dist" ]; then
          ls -la dist/
        fi

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          VSA_VisionSolutionAssistant-*.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
